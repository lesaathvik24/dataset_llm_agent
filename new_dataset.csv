Snippet ID,Language,Snippet,Description,Complexity
31,Python,def factorial(n):,,
if n == 0:,,,,
return 1,,,,
    else:,,,,
return n * factorial(n-1),Calculates the factorial of a number recursively,Medium,,
32,JavaScript,function factorial(n) {,,
return n === 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
33,Java,public int factorial(int n) {,,
return n == 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
34,C++,int factorial(int n) {,,
return n == 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
35,Ruby,def factorial(n),,
n == 0 ? 1 : n * factorial(n - 1),,,,
end,Calculates the factorial of a number recursively,Medium,,
36,Python,import random,,
random_number = random.randint(1,100),Generates a random number between 1 and 100,Easy,
37,JavaScript,const randomNumber = Math.floor(Math.random() * 100) + 1;,Generates a random number between 1 and 100,Easy
38,Java,Random rand = new Random();,,
int randomNumber = rand.nextInt(100) + 1;,Generates a random number between 1 and 100,Easy,,
39,C++,#include <random>,,
std::random_device rd;,,,,
std::mt19937 gen(rd());,,,,
std::uniform_int_distribution<> dis(1,100);,,,
int randomNumber = dis(gen);,Generates a random number between 1 and 100,Easy,,
40,Ruby,random_number = rand(1..100),Generates a random number between 1 and 100,Easy
41,Python,def bubble_sort(arr):,,
    n = len(arr),,,,
    for i in range(n):,,,,
for j in range(0,n-i-1):,,,
if arr[j] > arr[j+1]:,,,,
                arr[j],arr[j+1] = arr[j+1], arr[j],,
    return arr,Implements bubble sort algorithm,Hard,,
42,JavaScript,function bubbleSort(arr) {,,
    const n = arr.length;,,,,
for (let i = 0; i < n; i++) {,,,,
for (let j = 0; j < n - i - 1; j++) {,,,,
if (arr[j] > arr[j + 1]) {,,,,
                [arr[j],arr[j + 1]] = [arr[j + 1], arr[j]];,,
            },,,,
        },,,,
    },,,,
    return arr;,,,,
},Implements bubble sort algorithm,Hard,,
43,Java,public void bubbleSort(int[] arr) {,,
    int n = arr.length;,,,,
for (int i = 0; i < n-1; i++),,,,
for (int j = 0; j < n-i-1; j++),,,,
if (arr[j] > arr[j+1]) {,,,,
                int temp = arr[j];,,,,
arr[j] = arr[j+1];,,,,
arr[j+1] = temp;,,,,
            },,,,
},Implements bubble sort algorithm,Hard,,
44,C++,void bubbleSort(int arr[], int n) {,
for (int i = 0; i < n-1; i++),,,,
for (int j = 0; j < n-i-1; j++),,,,
if (arr[j] > arr[j+1]),,,,
                swap(arr[j],arr[j+1]);,,,
},Implements bubble sort algorithm,Hard,,
45,Ruby,def bubble_sort(arr),,
  n = arr.length,,,,
  loop do,,,,
    swapped = false,,,,
(n-1).times do |i|,,,,
if arr[i] > arr[i+1],,,,
        arr[i],arr[i+1] = arr[i+1], arr[i],,
        swapped = true,,,,
      end,,,,
    end,,,,
    break unless swapped,,,,
  end,,,,
  arr,,,,
end,Implements bubble sort algorithm,Hard,,
46,Python,import datetime,,
current_time = datetime.datetime.now(),Gets the current date and time,Easy,,
47,JavaScript,const currentTime = new Date();,Gets the current date and time,Easy
48,Java,import java.time.LocalDateTime;,,
LocalDateTime currentTime = LocalDateTime.now();,Gets the current date and time,Easy,,
49,C++,#include <chrono>,,
auto currentTime = std::chrono::system_clock::now();,Gets the current date and time,Easy,,
50,Ruby,require 'date',,
current_time = DateTime.now,Gets the current date and time,Easy,,
51,Python,def fibonacci(n):,,
if n <= 1:,,,,
        return n,,,,
    else:,,,,
return fibonacci(n-1) + fibonacci(n-2),Calculates the nth Fibonacci number recursively,Medium,,
52,JavaScript,function fibonacci(n) {,,
return n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2);,,,,
},Calculates the nth Fibonacci number recursively,Medium,,
53,Java,public int fibonacci(int n) {,,
if (n <= 1),,,,
        return n;,,,,
return fibonacci(n-1) + fibonacci(n-2);,,,,
},Calculates the nth Fibonacci number recursively,Medium,,
54,C++,int fibonacci(int n) {,,
if (n <= 1),,,,
        return n;,,,,
return fibonacci(n-1) + fibonacci(n-2);,,,,
},Calculates the nth Fibonacci number recursively,Medium,,
55,Ruby,def fibonacci(n),,
n <= 1 ? n : fibonacci(n-1) + fibonacci(n-2),,,,
end,Calculates the nth Fibonacci number recursively,Medium,,
56,Python,import re,,
pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',,,
"text = ""Contact us at info@example.com""",,,,
matches = re.findall(pattern,,,,
57,Python,def factorial(n):,,
if n == 0:,,,,
return 1,,,,
    else:,,,,
return n * factorial(n-1),Calculates the factorial of a number recursively,Medium,,
58,JavaScript,function factorial(n) {,,
return n === 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
59,Java,public int factorial(int n) {,,
return n == 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
60,C++,int factorial(int n) {,,
return n == 0 ? 1 : n * factorial(n - 1);,,,,
},Calculates the factorial of a number recursively,Medium,,
61,Ruby,def factorial(n),,
n == 0 ? 1 : n * factorial(n - 1),,,,
end,Calculates the factorial of a number recursively,Medium,,
62,Python,import random,,
print(random.randint(1,10)),Generates and prints a random number between 1 and 10,Easy,
63,JavaScript,console.log(Math.floor(Math.random() * 10) + 1);,Generates and prints a random number between 1 and 10,Easy
64,Java,System.out.println((int)(Math.random() * 10) + 1);,Generates and prints a random number between 1 and 10,Easy
65,C++,#include <cstdlib>,,
#include <ctime>,,,,
int main() {,,,,
srand(time(0));,,,,
std::cout << rand() % 10 + 1;,,,,
return 0;,,,,
},Generates and prints a random number between 1 and 10,Easy,,
66,Ruby,puts rand(1..10),Generates and prints a random number between 1 and 10,Easy
67,Python,def is_prime(n):,,
if n < 2:,,,,
        return False,,,,
for i in range(2,int(n**0.5) + 1):,,,
if n % i == 0:,,,,
            return False,,,,
    return True,Checks if a number is prime,Hard,,
68,JavaScript,function isPrime(n) {,,
if (n < 2) return false;,,,,
for (let i = 2; i <= Math.sqrt(n); i++) {,,,,
if (n % i === 0) return false;,,,,
    },,,,
    return true;,,,,
},Checks if a number is prime,Hard,,
69,Java,boolean isPrime(int n) {,,
if (n < 2) return false;,,,,
for (int i = 2; i <= Math.sqrt(n); i++) {,,,,
if (n % i == 0) return false;,,,,
    },,,,
    return true;,,,,
},Checks if a number is prime,Hard,,
70,C++,bool isPrime(int n) {,,
if (n < 2) return false;,,,,
for (int i = 2; i <= sqrt(n); i++) {,,,,
if (n % i == 0) return false;,,,,
    },,,,
    return true;,,,,
},Checks if a number is prime,Hard,,
71,Ruby,def is_prime?(n),,
return false if n < 2,,,,
(2..Math.sqrt(n).to_i).each do |i|,,,,
return false if n % i == 0,,,,
    end,,,,
    true,,,,
end,Checks if a number is prime,Hard,,
72,Python,class Node:,,
    def __init__(self, data):,,,
        self.data = data,,,,
        self.next = None,Defines a node for a linked list,Medium,,
73,JavaScript,class Node {,,
    constructor(data) {,,,,
        this.data = data;,,,,
        this.next = null;,,,,
    },,,,
},Defines a node for a linked list,Medium,,
74,Java,class Node {,,
    int data;,,,,
    Node next;,,,,
    Node(int data) {,,,,
        this.data = data;,,,,
        this.next = null;,,,,
    },,,,
},Defines a node for a linked list,Medium,,
75,C++,class Node {,,
public:,,,,
    int data;,,,,
    Node* next;,,,,
    Node(int d) : data(d), next(nullptr) {},,,
};,Defines a node for a linked list,Medium,,
76,Ruby,class Node,,
    attr_accessor :data, :next,,,
    def initialize(data),,,,
        @data = data,,,,
        @next = nil,,,,
    end,,,,
end,Defines a node for a linked list,Medium,,
77,Python,def bubble_sort(arr):,,
    n = len(arr),,,,
    for i in range(n):,,,,
for j in range(0,n-i-1):,,,
if arr[j] > arr[j+1]:,,,,
                arr[j],arr[j+1] = arr[j+1], arr[j],,
    return arr,Implements bubble sort algorithm,Hard,,
78,JavaScript,function bubbleSort(arr) {,,
    let n = arr.length;,,,,
for (let i = 0; i < n; i++) {,,,,
for (let j = 0; j < n - i - 1; j++) {,,,,
if (arr[j] > arr[j + 1]) {,,,,
                [arr[j],arr[j + 1]] = [arr[j + 1], arr[j]];,,
            },,,,
        },,,,
    },,,,
    return arr;,,,,
},Implements bubble sort algorithm,Hard,,
79,Java,void bubbleSort(int[] arr) {,,
    int n = arr.length;,,,,
for (int i = 0; i < n-1; i++),,,,
for (int j = 0; j < n-i-1; j++),,,,
if (arr[j] > arr[j+1]) {,,,,
                int temp = arr[j];,,,,
arr[j] = arr[j+1];,,,,
arr[j+1] = temp;,,,,
            },,,,
},Implements bubble sort algorithm,Hard,,
80,C++,void bubbleSort(int arr[], int n) {,
for (int i = 0; i < n-1; i++),,,,
for (int j = 0; j < n-i-1; j++),,,,
            if (arr[,,,,
81,Python,def factorial(n):,,
if n == 0:,,,,
return 1,,,,
    else:,,,,
return n * factorial(n-1),Calculates the factorial of a number recursively,Medium,,
82,JavaScript,function quickSort(arr) {,,
if (arr.length <= 1) return arr;,,,,
const pivot = arr[0];,,,,
const left = arr.slice(1).filter(x => x < pivot);,,,,
const right = arr.slice(1).filter(x => x >= pivot);,,,,
    return [...quickSort(left), pivot, ...quickSort(right)];,,
},Implements the quicksort algorithm,Hard,,
83,Java,public class BinarySearch {,,
    public static int binarySearch(int[] arr, int target) {,,,
int left = 0,right = arr.length - 1;,,,
        while (left <= right) {,,,,
int mid = left + (right - left) / 2;,,,,
            if (arr[mid] == target) return mid;,,,,
if (arr[mid] < target) left = mid + 1;,,,,
else right = mid - 1;,,,,
        },,,,
return -1;,,,,
    },,,,
},Implements binary search algorithm,Hard,,
84,C++,template <typename T>,,
T max(T a, T b) {,,,
    return (a > b) ? a : b;,,,,
},Generic function to find maximum of two values,Easy,,
85,Ruby,class Node,,
  attr_accessor :data, :next,,,
  def initialize(data),,,,
    @data = data,,,,
    @next = nil,,,,
  end,,,,
end,Defines a Node class for a linked list,Medium,,